#include <aroma.h>
#include <time.h>
#include <pthread.h>
#define BENCOLOR_GOOD RGB(7BBF2B)
#define BENCOLOR_BAD RGB(FF4343)

#define OT_BORDER_CORN (libaroma_fb()->w)
#define OT_BORDER_CENT ((libaroma_fb()->w/2)*0.75)
#define OT_BORDER_THIC ((libaroma_fb()->w/2)*0.20)

byte good=1;
byte tclock=0;
word bencolor;
clock_t t;
pthread_t upd;

byte ot_render(LIBAROMA_CONTROLP clk, LIBAROMA_CANVASP cv){
	t = clock();
	word bencolor=good?BENCOLOR_GOOD:BENCOLOR_BAD;
	libaroma_canvas_fillcolor(cv, bencolor);
	LIBAROMA_PATHP lpath=libaroma_path(OT_BORDER_THIC, 0);
	libaroma_path_add(lpath, OT_BORDER_CENT+OT_BORDER_THIC, libaroma_fb()->h/2);
	libaroma_path_add(lpath, OT_BORDER_THIC, libaroma_fb()->h);
	libaroma_path_add(lpath, 0, libaroma_fb()->h);
	libaroma_path_add(lpath, OT_BORDER_CENT, libaroma_fb()->h/2);
	libaroma_path_add(lpath, 0, 0);
	libaroma_path_draw(cv, lpath, 0, 0xFF, NULL, 0.5);
	LIBAROMA_PATHP rpath=libaroma_path(libaroma_fb()->w, 0);
	libaroma_path_add(rpath, (libaroma_fb()->w-OT_BORDER_CENT), libaroma_fb()->h/2);
	libaroma_path_add(rpath, libaroma_fb()->w, libaroma_fb()->h);
	libaroma_path_add(rpath, libaroma_fb()->w-OT_BORDER_THIC, libaroma_fb()->h);
	libaroma_path_add(rpath, (libaroma_fb()->w-(OT_BORDER_CENT+OT_BORDER_THIC)), libaroma_fb()->h/2);
	libaroma_path_add(rpath, (libaroma_fb()->w-OT_BORDER_THIC), 0);
	libaroma_path_draw(cv, rpath, 0, 0xFF, NULL, 0.5);
	if (!tclock) libaroma_ctl_clock_setcolor(clk, LIBAROMA_CTL_CLOCK_COLOR_CENTER, bencolor);
	libaroma_ctl_clock_setbg_ex(clk, cv, 0);
	t = clock() - t;
	printf("MLX: ot_render took %1.6f\n", ((float)t)/CLOCKS_PER_SEC);
	return 1;
}

byte ot_clktoggle(LIBAROMA_CONTROLP clk){
	word bencolor=good?BENCOLOR_BAD:BENCOLOR_GOOD;
	libaroma_ctl_clock_setcolor(clk, LIBAROMA_CTL_CLOCK_COLOR_CENTER, bencolor);
	libaroma_ctl_clock_setcolor(clk, LIBAROMA_CTL_CLOCK_COLOR_HOUR, bencolor);
	libaroma_ctl_clock_setcolor(clk, LIBAROMA_CTL_CLOCK_COLOR_MINUTE, bencolor);
	libaroma_ctl_clock_setcolor(clk, LIBAROMA_CTL_CLOCK_COLOR_SECOND, bencolor);
	libaroma_ctl_clock_setalpha(clk, tclock?0xFF:0x01);
	if (!tclock) libaroma_ctl_clock_setcolor(clk, LIBAROMA_CTL_CLOCK_COLOR_CENTER, good?BENCOLOR_GOOD:BENCOLOR_BAD);
}

int main(int argc, char **argv){
	libaroma_config()->runtime_monitor=LIBAROMA_START_MUTEPARENT;
	libaroma_config()->multicore_init_num=2;
	libaroma_start();
	libaroma_wm_cursor_setvisible(0);
	
	LIBAROMA_WINDOWP win=libaroma_window(0, 0, 0, 0, 0);
	LIBAROMA_CANVASP bg=libaroma_canvas(libaroma_fb()->w, libaroma_fb()->h);
	
	LIBAROMA_CONTROLP clk=libaroma_ctl_clock(win, 0, 0, 0, 0, 0, bg, LIBAROMA_CTL_CLOCK_RIPPLE|LIBAROMA_CTL_CLOCK_NOBORDER);
	libaroma_ctl_clock_setalpha(clk, 0x01);
	ot_render(clk, bg);
	libaroma_window_anishow(win, 12, 400);
	LIBAROMA_MSG msg;
	byte cmd;
	while (1){
		cmd = LIBAROMA_CMD(libaroma_window_pool(win,&msg));
		if (msg.msg == LIBAROMA_MSG_KEY_POWER || msg.msg == LIBAROMA_MSG_KEY_SELECT) {
			break;
		}
		else if (cmd==LIBAROMA_CMD_CLICK){
			good=!good;
			ot_render(clk, bg);
			if (tclock)
				ot_clktoggle(clk);
		}
		else if (cmd==LIBAROMA_CMD_HOLD){
			tclock=!tclock;
			ot_clktoggle(clk);
		}
	}
	//libaroma_sleep(15000);
	libaroma_window_aniclose(win, 12, 400);
	libaroma_end();
	
	return 0;
}
